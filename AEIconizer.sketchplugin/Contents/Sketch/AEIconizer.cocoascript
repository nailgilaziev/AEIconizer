// Sketch Plugin: AEIconizer (ctrl shift i)
// Source: github.com/tadija/AEIconizer

// iOS icon sizes
var iTunesSizes = [NSArray arrayWithObjects: 512, nil];
var iOSSizes = [NSArray arrayWithObjects: 83.5, 76, 72, 50, 60, 40, 29, nil];
var watchOSSizes = [NSArray arrayWithObjects: 98, 86, 27.5, 24, nil];
var wirelessInstallSizes = [NSArray arrayWithObjects: 57, nil];
var iconSizes = [NSArray arrayWithObjects: iTunesSizes, iOSSizes, watchOSSizes, wirelessInstallSizes, nil];

// iOS icon names
var artboardNames = [NSArray arrayWithObjects:    
    "appicon29", "appicon29@2x", "appicon29@3x", 
    "appicon40", "appicon40@2x", "appicon40@3x",
    "appicon50", "appicon50@2x",   
    "appicon57", "appicon57@2x",     
                 "appicon60@2x", "appicon60@3x", 
    "appicon72", "appicon72@2x", 
    "appicon76", "appicon76@2x", 
                 "appicon83.5@2x",     
    "appicon512", "appicon512@2x", nil];

function onRun(context) {   
    log('artboardNames '+ artboardNames);
    var doc = context.document;
    if (originalIcon = handleSelection(context)) {
        if ([[originalIcon frame] width] == [[originalIcon frame] height]) {
            [originalIcon setName: "appiconOriginal"];
            removeExistingIcons(context);
            iconize(originalIcon,context);
            [[doc currentView] centerLayersInCanvas];
        } else {
            [doc showMessage:"Oops, icon artboard must have same width and height"];
        }
    }
}

function handleSelection(context) {
    var selection = context.selection;
    var doc = context.document;
    var iconArtboard;

    if([selection count] == 0) {
        if ([[[doc currentPage] artboards] count] == 1) {
            iconArtboard = [[[doc currentPage] artboards] firstObject];
        } else {
            [doc showMessage:"Oops, you have to select something"];
        }
    } else {
        var currentSelection = selection[0];
        if (currentSelection.className() == "MSArtboardGroup") {
            iconArtboard = currentSelection;
        } else {
            iconArtboard = [currentSelection parentArtboard];
            if (!iconArtboard) {
                [doc showMessage:"Oops, selection has to be inside artboard"];
            }
        }
        [currentSelection setIsSelected:false];
    }

    return iconArtboard
}


function removeExistingIcons(context) {
    var doc = context.document;
    var artboards = [[doc currentPage] artboards];
    var loop = [artboards objectEnumerator];
    while (artboard = [loop nextObject]) {
        var name = [artboard name];
        if ([artboardNames containsObject: name]) {
            [[doc currentPage] removeLayer:artboard];
        }
    }
}

function iconize(originalIcon,context) {
    var originalSize = [[originalIcon frame] width];
    var originalX = [[originalIcon absoluteRect] rulerX];
    var originalY = [[originalIcon absoluteRect] rulerY];

    var spacing = 40;
    var startX = originalX;
    var startY = originalY + originalSize + spacing;

    var allSizes = [iconSizes objectEnumerator];
    log('iconize called')
    while (sizeArray = [allSizes nextObject]) {
        log('startX ' + startX + ' for sizeArray ' + sizeArray);
        startX = createIconsWithSizes(sizeArray, originalIcon, startX, startY, spacing,context);
    }
}

function createIconsWithSizes(sizeArray, originalIcon, fromX, fromY, spacing,context) {

    // This function creates a block of artboards
    // while creating artboards with icons he expands the area of block 
    // currently occupied area
    occupiedHeight = 0; 
    occupiedWidth = 0;

    var sizes = [sizeArray objectEnumerator]; //for example watchOSSizes = 98, 86, 27.5, 24
    while (iconSize = [sizes nextObject]) {        

        //each size may have line of 1x ,2x and 3x artboards
        var iconX = fromX; //begin from start and next expand this value
        var iconY = fromY + occupiedHeight;
        
        for (var i = 3; i >= 1; i--) {
            var iconName = "appicon" + iconSize;
            if(i != 1) {
                iconName += "@" + i + "x";
            }            
            log('artboard contains ' + iconName + '? ' + [artboardNames containsObject: iconName]);
            if([artboardNames containsObject: iconName]) {
                var newArt = scaleIcon(originalIcon, iconSize * i, iconName);
                [[newArt absoluteRect] setRulerX:iconX];
                [[newArt absoluteRect] setRulerY:iconY];
                iconX += iconSize * i + spacing;
            }  
        }

        //if we expand occupied area width need to extend this area
        var lineOccupiedWidth = iconX - fromX;
        if(lineOccupiedWidth > occupiedWidth) {
            occupiedWidth = lineOccupiedWidth;
        }

        // expand area by default on maximum possible size. 
        occupiedHeight += (iconSize * 3) + spacing;
    }

    log('occupied area is w*h ' + occupiedWidth + ' * ' + occupiedHeight);

    return fromX + occupiedWidth + (3 * spacing);
}

function scaleIcon(originalIcon, newSize, newName) {
    var newIcon = [originalIcon duplicate];

    var originalSize = [[originalIcon frame] width];
    var ratio = newSize / originalSize;
    [newIcon multiplyBy:ratio];

    [newIcon setName: newName];
    [newIcon select:true byExpandingSelection:true];

    return newIcon;
}

onRun(context);
